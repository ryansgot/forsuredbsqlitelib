buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        classpath 'com.fsryan.gradle.autosemver:autosemver-git:0.1.0-alpha'
    }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'autosemver-git'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'jacoco'

group = 'com.fsryan.forsuredb'
long buildTime = new Date().getTime()

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_7

repositories {
    def awsAccessKeyId = project.hasProperty("awsMavenAccessKey") ? project.property("awsMavenAccessKey") : "${System.env.AWS_ACCESS_KEY_ID}"
    def awsSecretKey = project.hasProperty("awsMavenSecretKey") ? project.property("awsMavenSecretKey") : "${System.env.AWS_SECRET_KEY}"
    maven {
        url "s3://repo.fsryan.com/release"
        credentials(AwsCredentials) {
            accessKey = awsAccessKeyId
            secretKey = awsSecretKey
        }
    }
    maven {
        url "s3://repo.fsryan.com/snapshot"
        credentials(AwsCredentials) {
            accessKey = awsAccessKeyId
            secretKey = awsSecretKey
        }
    }
    jcenter()
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    // TODO: remove dependency upon gson--this is limiting for the consumers
    compile 'com.google.code.gson:gson:2.8.0'

    compile 'com.fsryan.forsuredb:forsuredbapi:0.11.6-test+1503979631901'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
}

jacoco {
    toolVersion = "0.7.6.201602180812"
}

task jacocoReport(type: JacocoReport, dependsOn: 'test') {

    group = 'Reporting'
    description = 'Generate Jacoco coverage reports after running tests.'

    executionData = files('build/jacoco/test.exec')
    sourceDirectories = files('src/main/java')
    classDirectories = fileTree(
            dir: 'build/classes',
            excludes: [
                    "**/*Test.class",
                    "**/*TestData.class",
                    "**/CollectionUtil.class"
            ]
    )

    reports {
        xml.enabled true
        csv.enabled false
        html.enabled = true
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.getProperty('bintrayUser') : ''
    key = project.hasProperty('bintrayApiKey') ? project.getProperty('bintrayApiKey') : ''

    publications = ['forsuredbsqlitelibPublication']
    pkg {
        repo = 'maven'
        name = 'sqlitelib'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/ryansgot/forsuredbsqlitelib.git'
        publicDownloadNumbers = true
        version {
            name = project.version
            desc = 'SQLite query generators for forsuredb project'
            released  = new Date()
            vcsTag = "v${project.version}"
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = project.name
            version = project.version
            from components.java
        }
        bintray(MavenPublication) {
            groupId = project.group
            artifactId = project.name
            version = project.version
            from components.java
        }
        mavenS3(MavenPublication) {
            groupId = project.group
            artifactId = project.name
            version = project.version
            from components.java
            pom.withXml {
                asNode().appendNode('build')
                        .appendNode('extensions')
                        .appendNode('extension')
                        .appendNode('groupId', 'org.kuali.maven.wagons').parent()
                        .appendNode('artifactId', 'maven-s3-wagon').parent()
                        .appendNode('version', '1.2.1')
            }
        }
    }
    repositories {
        def awsAccessKeyId = project.hasProperty("awsMavenAccessKey") ? project.property("awsMavenAccessKey") : ""
        def awsSecretKey = project.hasProperty("awsMavenSecretKey") ? project.property("awsMavenSecretKey") : ""
        maven {
            name 'release'
            url "s3://repo.fsryan.com/release"
            credentials(AwsCredentials) {
                accessKey = awsAccessKeyId
                secretKey = awsSecretKey
            }
        }
        maven {
            name 'snapshot'
            url "s3://repo.fsryan.com/snapshot"
            credentials(AwsCredentials) {
                accessKey = awsAccessKeyId
                secretKey = awsSecretKey
            }
        }
    }
}

model {
    tasks.generatePomFileForBintrayPublication {
        doFirst {
            file("$buildDir/poms").mkdirs()
        }
        destination = file("$buildDir/poms/pom-default.xml")
    }
}

afterEvaluate { project ->
    tasks.findByName('bintrayUpload').dependsOn('generatePomFileForBintrayPublication')

    task release(dependsOn: ['bintrayUpload', 'publishMavenS3PublicationToReleaseRepository']) {
        description = "Release ${project.name}-${project.version} to bintray and S3 release repos"
        group = 'Release'
        doLast {
            println "Huzzah! ${project.name}-${project.version} Successfully uploaded to bintray and S3 release repos"
        }
    }
    task releaseSnapshot(dependsOn: 'publishMavenS3PublicationToSnapshotRepository') {
        description = "Release ${project.name}-${project.version} to S3 snapshot repo"
        group = 'Release'
        doLast {
            println "Huzzah! ${project.name}-${project.version} Successfully uploaded to S3 snapshot repo"
        }
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
    //options.encoding = 'UTF-8'
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

autosemver {
    branchConfigs {
        integration {
            skipCiCommitMessageSuffix = '[skip ci]'
            pullRemote = 'origin'
            pushRemote = 'origin'
            versionIncrement = "patch"
            preRelease = 'test'
            metaData = Long.toString(buildTime)
        }
        alpha { // <-- for new features
            skipCiCommitMessageSuffix = '[skip ci]'
            pullRemote = 'origin'
            pushRemote = 'origin'
            versionIncrement = "minor"
            preRelease = 'alpha'
        }
        beta { // <-- for bug fixes
            skipCiCommitMessageSuffix = '[skip ci]'
            pullRemote = 'origin'
            pushRemote = 'origin'
            preRelease = 'beta'
        }
        master {    // <-- stable version
            skipCiCommitMessageSuffix = '[skip ci]'
            pullRemote = 'origin'
            pushRemote = 'origin'
        }
    }
}
